stageResultMap = [:]
pipeline {
    options {
        skipDefaultCheckout()
        timestamps()
        disableConcurrentBuilds()
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy vXXXX.XXXX.X (optional)')
        choice(name: 'DEPLOY_TO', choices: 'dev', description: 'The deployment stage to trigger')
    }
    environment {
        PROJECT_NAME = 'aspireprototype'
        ENVIRONMENT = "dev"
        ENV = "dev"
        INIT_TOKEN   = credentials('Vault-Access')                                   // OIDC provider this token is Auto Generated //
        SPHINX_TOKEN = credentials('ncatssvcdvops-sphinx')                           // PatToken Read Only Access for the DevOps Artifacts Repo https://github.com/Sphinx-Automation/devops-pipeline-artifacts.git //
        ROLE_NAME    = "$ENVIRONMENT-$PROJECT_NAME"
        APP_TYPE     = "api"
    }
    agent {
        node { label 'internal-build.ncats' }
    }
    triggers {
        pollSCM('H/5 * * * *')
    }

    stages {
        stage('Clean & Clone') {
            steps {
                cleanWs()
                checkout scm
                script {
                sh '''
                    ### Cloning the repo from DevOps Artifacts Repository Repo ###
                    git clone https://$SPHINX_TOKEN@github.com/Sphinx-Automation/devops-pipeline-artifacts.git
                    ls -lrth ./devops-pipeline-artifacts/application
                    ###  Running the script with Env specific to Authenticate Vault & Get Application Secrets for Docker & NpmJS Token###
                    cd devops-pipeline-artifacts/application && /bin/bash getAppSecretsByRole.sh  && /bin/bash getNcatsDockerSecretsByRole.sh && /bin/bash getNpmJsSecretsByRole.sh
                    '''
                }
            }
        }
        stage('Build Version') {
            when { expression { return !params.BUILD_VERSION } }
            steps {
                script {
                    BUILD_VERSION_GENERATED = VersionNumber(
                        versionNumberString: 'v${BUILD_YEAR, XX}.${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
                        projectStartDate:    '1971-11-11',
                        skipFailedBuilds:    true)
                    currentBuild.displayName = BUILD_VERSION_GENERATED
                    env.BUILD_VERSION = BUILD_VERSION_GENERATED
                    env.BUILD = 'true'
                }
            }
        }
        stage('Docker login'){
            steps {
               configFileProvider([
                    configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh')
                ]){
                  sh '''#!/bin/bash
                        source prepare.sh
                        docker login https://registry.ncats.nih.gov:5000 -u "${DOCKERLOGIN}" -p "${DOCKERPASSWORD}"
                    '''
                } 
            }

        }
        stage('Build image') {
            when { expression { return env.BUILD == 'true' }}
            steps {
            // Passing Varibles prepare.sh to retrive NPMJS TOKEN & DOCKER AUTHENTICATION //
                configFileProvider([
                    configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh')
                ]){  
                script {
                    withEnv([
                              "DOCKER_REPO_NAME_1=registry.ncats.nih.gov:5000/aicp-mfevisualizer",
                              "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION)
                        ]){
                        sh '''#!/bin/bash
                            docker build --no-cache --build-arg BUILD_VERSION=${BUILD_VERSION} -t ${DOCKER_REPO_NAME_1}:${BUILD_VERSION} -f Dockerfile .
                            docker push ${DOCKER_REPO_NAME_1}:${BUILD_VERSION}
                           '''
                        }
                    }
                }
            }
        }    
        stage('DeployCI') {
            agent {
                node { label 'aicp-dev' }
            }
            environment {
                   INIT_TOKEN   = credentials('Vault-Access')                                   // OIDC provider this token is Auto Generated //
                   SPHINX_TOKEN = credentials('ncatssvcdvops-sphinx')                           // PatToken Read Only Access for the DevOps Artifacts Repo https://github.com/Sphinx-Automation/devops-pipeline-artifacts.git //
              }
            steps {
               cleanWs()
               checkout scm      
               configFileProvider([
                    configFile(fileId: 'aicp-mfe-visualizer-docker-compose-dev.yml', targetLocation: "docker-compose.yml"),
                    configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh')   
                ]) {
                        withEnv([
                            "PROJECT_NAME=aspireprototype",
                            "ENVIRONMENT=dev",
                            "ENV=dev",
                            "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION),                          
                            "ROLE_NAME=$ENV-$PROJECT_NAME",
                            "APP_TYPE=api",
                            "DOCKER_REPO_NAME_1=registry.ncats.nih.gov:5000/aicp-mfevisualizer"
                            
                        ]) {
                            script {
                                sh '''
                                   ### Cloning the repo from DevOps Artifacts Repository Repo ###
                                   git clone https://$SPHINX_TOKEN@github.com/Sphinx-Automation/devops-pipeline-artifacts.git
                                   ls -lrth ./devops-pipeline-artifacts/application
                                   ###  Running the script with Env specific to Authenticate Vault & Get Application Secrets for Docker & NpmJS Token###
                                   cd devops-pipeline-artifacts/application && /bin/bash getAppSecretsByRole.sh  && /bin/bash getNcatsDockerSecretsByRole.sh && /bin/bash getNpmJsSecretsByRole.sh
                                '''
                                sh '''#!/bin/bash
                                   source prepare.sh
                                   docker login https://registry.ncats.nih.gov:5000 -u "${DOCKERLOGIN}" -p "${DOCKERPASSWORD}"
                                   docker-compose down -v --rmi all | xargs echo

                                   docker pull $DOCKER_REPO_NAME_1:$BUILD_VERSION
                                   docker tag $DOCKER_REPO_NAME_1:$BUILD_VERSION $DOCKER_REPO_NAME_1:current

                                   docker-compose up -d
                                   docker rmi \$(docker images -aq) | xargs echo
                                '''
                            }
                        }
                    }
                }
            }
        }
    }
